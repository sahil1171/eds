import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Session;
import javax.servlet.Servlet;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

@Component(service = Servlet.class, property = {
    ServletResolverConstants.SLING_SERVLET_PATHS + "=/bin/find-active-links",
    ServletResolverConstants.SLING_SERVLET_METHODS + "=GET"
})
public class ActivePagesLinkExtractorServlet extends SlingAllMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(ActivePagesLinkExtractorServlet.class);

    @Reference
    private transient QueryBuilder queryBuilder;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        LOG.info("Received request to find active pages and retrieve specific links.");

        ResourceResolver resourceResolver = request.getResourceResolver();
        Session session = resourceResolver.adaptTo(Session.class);

        if (session == null) {
            LOG.error("Could not obtain JCR session.");
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Could not obtain JCR session.");
            return;
        }

        try {
            // Query setup
            Map<String, String> queryMap = new HashMap<>();
            queryMap.put("path", "/content/etrade/retail/en_US/pages");
            queryMap.put("type", "cq:PageContent");
            queryMap.put("property", "cq:lastReplicationAction");
            queryMap.put("property.value", "Activate");
            queryMap.put("p.limit", "-1");

            PredicateGroup predicateGroup = PredicateGroup.create(queryMap);
            Query query = queryBuilder.createQuery(predicateGroup, session);
            LOG.debug("Executing query to find active pages under /content/etrade/retail/en_US/pages.");

            SearchResult searchResult = query.getResult();
            List<Hit> hits = searchResult.getHits();
            LOG.info("Found {} active pages.", hits.size());

            StringBuilder responseContent = new StringBuilder();

            for (Hit hit : hits) {
                String pagePath = hit.getPath();
                String pageUrl = "http://dit15w220m7:4503" + pagePath + ".html";
                LOG.debug("Processing active page at path: {}", pagePath);

                try {
                    // Retrieve page content from the publisher instance
                    Document doc = Jsoup.connect(pageUrl).get();
                    Elements links = doc.select("a[href]");

                    responseContent.append("Active page: ").append(pagePath).append("\n");
                    LOG.debug("Scanning page: {} for relevant links", pageUrl);

                    // Filter links containing 'cdn' or '/aempros/content/dam' and add to response
                    for (Element link : links) {
                        String href = link.attr("href");
                        if (href.contains("cdn") || href.contains("/aempros/content/dam")) {
                            responseContent.append(" - Found link: ").append(href).append("\n");
                            LOG.debug("Found matching link on page {}: {}", pagePath, href);
                        }
                    }

                } catch (IOException e) {
                    LOG.error("Error connecting to page: {}", pageUrl, e);
                }
            }

            // Write the response
            response.setContentType("text/plain");
            response.getWriter().write(responseContent.toString());
            LOG.info("Response sent with filtered links from active pages.");

        } catch (Exception e) {
            LOG.error("Error executing query to find active pages", e);
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error finding active pages.");
        } finally {
            if (session != null && session.isLive()) {
                session.logout();
                LOG.info("Session logged out.");
            }
        }
    }
}
