package org.jsoup.examples.servlets;

import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.apache.sling.api.resource.ResourceResolver;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Session;
import javax.servlet.Servlet;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Component(service = Servlet.class,
           property = {
               ServletResolverConstants.SLING_SERVLET_PATHS + "=/bin/jsoup/findlinks",
               ServletResolverConstants.SLING_SERVLET_METHODS + "=GET"
           })
public class FindLinksServlet extends SlingAllMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(FindLinksServlet.class);

    @Reference
    private QueryBuilder queryBuilder;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        LOG.info("Received request to find active pages and retrieve all links, media, and imports.");

        ResourceResolver resourceResolver = request.getResourceResolver();
        Session session = resourceResolver.adaptTo(Session.class);

        if (session == null) {
            LOG.error("Could not obtain JCR session.");
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Could not obtain JCR session.");
            return;
        }

        String resourceType = request.getParameter("resourceType");
        LOG.info("Initiating query for resourceType: {}", resourceType);

        try {
            // Query setup
            Map<String, String> queryMap = new HashMap<>();
            queryMap.put("path", "/content");
            queryMap.put("type", "cq:PageContent");
            queryMap.put("property", "sling:resourceType");
            queryMap.put("property.value", resourceType);
            queryMap.put("property.1_property", "cq:lastReplicationAction");
            queryMap.put("property.1_property.value", "Activate");
            queryMap.put("p.limit", "-1");

            PredicateGroup predicateGroup = PredicateGroup.create(queryMap);
            Query query = queryBuilder.createQuery(predicateGroup, session);
            SearchResult searchResult = query.getResult();

            List<Hit> hits = searchResult.getHits();
            LOG.info("Found {} active pages for resource type: {}", hits.size(), resourceType);

            StringBuilder responseContent = new StringBuilder();

            for (Hit hit : hits) {
                String pagePath = hit.getPath();
                String pageUrl = "http://<host>:4503" + pagePath + ".html";  // Replace <host> with actual host
                LOG.debug("Processing page at path: {}, full URL: {}", pagePath, pageUrl);

                try {
                    // Retrieve all links, media, and imports from the page
                    responseContent.append("Active page: ").append(pagePath).append("\n");
                    appendPageContent(responseContent, pageUrl);

                } catch (IOException e) {
                    LOG.error("Error connecting to page URL: {}", pageUrl, e);
                }
            }

            // Write the response
            response.setContentType("text/plain");
            response.getWriter().write(responseContent.toString());
            LOG.info("Response successfully sent with all links for active pages.");

        } catch (Exception e) {
            LOG.error("Error executing query to find active pages", e);
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error finding active pages.");
        } finally {
            if (session != null && session.isLive()) {
                session.logout();
                LOG.info("Session successfully logged out.");
            }
        }
    }

    // Helper method to get and append all links, media, and imports from a page
    private void appendPageContent(StringBuilder responseContent, String url) throws IOException {
        Document doc = Jsoup.connect(url)
                .userAgent("Mozilla")
                .timeout(5000)
                .get();

        responseContent.append("\"media\": [");
        Elements media = doc.select("[src]");
        for (Element src : media) {
            String mediaTag = src.tagName();
            String mediaSrc = src.attr("abs:src");
            if (mediaTag.equals("img")) {
                String width = src.attr("width");
                String height = src.attr("height");
                String alt = trim(src.attr("alt"), 20);
                responseContent.append(String.format("{\"tag\": \"%s\", \"src\": \"%s\", \"width\": \"%s\", \"height\": \"%s\", \"alt\": \"%s\"},",
                        mediaTag, mediaSrc, width, height, alt));
                LOG.debug("Found image: src={}, width={}, height={}, alt={}", mediaSrc, width, height, alt);
            } else {
                responseContent.append(String.format("{\"tag\": \"%s\", \"src\": \"%s\"},", mediaTag, mediaSrc));
                LOG.debug("Found media element: tag={}, src={}", mediaTag, mediaSrc);
            }
        }
        responseContent.append("],");

        responseContent.append("\"imports\": [");
        Elements imports = doc.select("link[href]");
        for (Element link : imports) {
            String linkHref = link.attr("abs:href");
            String linkRel = link.attr("rel");
            responseContent.append(String.format("{\"tag\": \"%s\", \"href\": \"%s\", \"rel\": \"%s\"},",
                    link.tagName(), linkHref, linkRel));
            LOG.debug("Found import: href={}, rel={}", linkHref, linkRel);
        }
        responseContent.append("],");

        responseContent.append("\"links\": [");
        Elements links = doc.select("a[href]");
        for (Element link : links) {
            String linkHref = link.attr("abs:href");
            String linkText = trim(link.text(), 35);
            responseContent.append(String.format("{\"tag\": \"a\", \"href\": \"%s\", \"text\": \"%s\"},",
                    linkHref, linkText));
            LOG.debug("Found link: href={}, text={}", linkHref, linkText);
        }
        responseContent.append("]");
    }

    private static String trim(String s, int width) {
        if (s.length() > width) {
            return s.substring(0, width - 1) + ".";
        } else {
            return s;
        }
    }
}
