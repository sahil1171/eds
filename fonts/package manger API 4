import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Session;
import javax.servlet.Servlet;
import java.io.IOException;
import java.util.*;
import org.apache.jackrabbit.vault.fs.api.PathFilterSet;
import org.apache.jackrabbit.vault.packaging.JcrPackage;
import org.apache.jackrabbit.vault.packaging.JcrPackageDefinition;
import org.apache.jackrabbit.vault.packaging.JcrPackageManager;
import org.apache.jackrabbit.vault.packaging.PackagingService;
import org.apache.jackrabbit.vault.packaging.PackageException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

@Component(service = Servlet.class,
           property = {
               ServletResolverConstants.SLING_SERVLET_PATHS + "=/bin/findlinks",
               ServletResolverConstants.SLING_SERVLET_METHODS + "=GET"
           })
public class FindLinksServlet extends SlingAllMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(FindLinksServlet.class);

    @Reference
    private QueryBuilder queryBuilder;

    @Reference
    private PackagingService packagingService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        LOG.info("Received request to find active pages and retrieve all links.");

        ResourceResolver resourceResolver = request.getResourceResolver();
        Session session = resourceResolver.adaptTo(Session.class);

        if (session == null) {
            LOG.error("Could not obtain JCR session.");
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Could not obtain JCR session.");
            return;
        }

        String resourceType = request.getParameter("resourceType");
        LOG.info("Initiating query for resourceType: {}", resourceType);

        try {
            // Query setup
            Map<String, String> queryMap = new HashMap<>();
            queryMap.put("path", "/content");
            queryMap.put("type", "cq:PageContent");
            queryMap.put("property", "sling:resourceType");
            queryMap.put("property.value", resourceType);
            queryMap.put("property.1_property", "cq:lastReplicationAction");
            queryMap.put("property.1_property.value", "Activate");
            queryMap.put("p.limit", "-1");

            LOG.debug("Query map parameters: {}", queryMap);

            PredicateGroup predicateGroup = PredicateGroup.create(queryMap);
            Query query = queryBuilder.createQuery(predicateGroup, session);
            SearchResult searchResult = query.getResult();

            List<Hit> hits = searchResult.getHits();
            LOG.info("Found {} active pages for resource type: {}", hits.size(), resourceType);

            Set<String> allLinks = new HashSet<>();
            for (Hit hit : hits) {
                String pagePath = hit.getPath();
                String pageUrl = "http://<host>:4503" + pagePath + ".html";  // Replace <host> with actual host

                LOG.debug("Processing page at path: {}, full URL: {}", pagePath, pageUrl);

                try {
                    Set<String> links = getAllLinksFromPage(pageUrl);
                    allLinks.addAll(links);
                    LOG.info("Found {} links on page: {}", links.size(), pagePath);

                } catch (IOException e) {
                    LOG.error("Error connecting to page URL: {}", pageUrl, e);
                }
            }

            if (!allLinks.isEmpty()) {
                createPackageWithLinks(session, allLinks);
                response.getWriter().write("Package created with all links as filters.");
            } else {
                response.getWriter().write("No links found to add to the package.");
            }

        } catch (Exception e) {
            LOG.error("Error executing query to find active pages", e);
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error finding active pages.");
        } finally {
            if (session != null && session.isLive()) {
                session.logout();
                LOG.info("Session successfully logged out.");
            }
        }
    }

    private Set<String> getAllLinksFromPage(String url) throws IOException {
        Set<String> links = new HashSet<>();
        LOG.debug("Connecting to page URL: {}", url);

        Document doc = Jsoup.connect(url)
                .userAgent("Mozilla")
                .timeout(5000)
                .get();

        LOG.debug("Connected to page URL successfully. Scanning for links.");

        Elements elements = doc.select("a[href]"); // Select all <a> tags with href attribute
        for (Element element : elements) {
            String href = element.attr("href");
            links.add(href);
            LOG.debug("Link extracted: {}", href);
        }

        Elements imageElements = doc.select("[src]");
        LOG.info("Number of image elements found: {}", imageElements.size());
        for (Element element : imageElements) {
            String src = element.attr("abs:src");
            if (!src.isEmpty()) {
                links.add(src);
                LOG.info("Link extracted (image): {}", src);
            }
        }

        LOG.info("Total links found on page {}: {}", url, links.size());
        return links;
    }

    private void createPackageWithLinks(Session session, Set<String> links) {
        try {
            JcrPackageManager packageManager = packagingService.getPackageManager(session);
            JcrPackage jcrPackage = packageManager.create("my_packages", "link_package", "1.0");
            JcrPackageDefinition definition = jcrPackage.getDefinition();

            if (definition != null) {
                for (String link : links) {
                    PathFilterSet filterSet = new PathFilterSet(link);
                    definition.getMetaInf().getFilter().add(filterSet);
                }
                session.save();
                LOG.info("Package created successfully with links as filters.");
            } else {
                LOG.error("Failed to define the package.");
            }
        } catch (RepositoryException | PackageException e) {
            LOG.error("Error creating package with links", e);
        }
    }
}

===========================================================

private void createPackageWithLinks(Session session, Set<String> links) {
    try {
        JcrPackageManager packageManager = PackagingService.getPackageManager(session);
        String groupName = "my_packages";
        String packageName = "link_package";
        String version = "1.0";

        // Check if package already exists
        if (packageManager.getPackage(groupName, packageName, version) != null) {
            LOG.warn("Package with the same name and version already exists. Deleting the existing package.");
            packageManager.removePackage(groupName, packageName, version);
        }

        // Create a new package
        JcrPackage jcrPackage = packageManager.create(groupName, packageName, version);
        JcrPackageDefinition definition = jcrPackage.getDefinition();
        
        if (definition != null) {
            List<PathFilterSet> filterSets = new ArrayList<>();
            for (String link : links) {
                PathFilterSet filterSet = new PathFilterSet(link);
                filterSets.add(filterSet);
            }
            definition.getMetaInf().getFilter().setFilterSets(filterSets);
        }
        session.save();
        LOG.info("Package created successfully with links as filters.");
    } catch (RepositoryException e) {
        LOG.error("Error creating package with links", e);
    }
}

