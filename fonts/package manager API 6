import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.resource.ResourceResolver;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Session;
import javax.servlet.Servlet;
import java.io.IOException;
import java.util.*;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import org.apache.jackrabbit.vault.fs.api.PathFilterSet;
import org.apache.jackrabbit.vault.fs.api.ProgressTrackerListener;
import org.apache.jackrabbit.vault.fs.config.DefaultWorkspaceFilter;
import org.apache.jackrabbit.vault.fs.io.ImportOptions;
import org.apache.jackrabbit.vault.packaging.JcrPackage;
import org.apache.jackrabbit.vault.packaging.JcrPackageDefinition;
import org.apache.jackrabbit.vault.packaging.JcrPackageManager;
import org.apache.jackrabbit.vault.util.DefaultProgressListener;

@Component(service = Servlet.class, 
          property = {
              "sling.servlet.paths=/bin/findlinksandcreatepackage",
              "sling.servlet.methods=GET"
          })
public class FindLinksAndCreatePackageServlet extends SlingAllMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(FindLinksAndCreatePackageServlet.class);

    @Reference
    private QueryBuilder queryBuilder;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        LOG.info("Started servlet to find links and create AEM package.");

        ResourceResolver resourceResolver = request.getResourceResolver();
        Session session = resourceResolver.adaptTo(Session.class);
        if (session == null) {
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Could not obtain JCR session.");
            return;
        }

        String resourceType = request.getParameter("resourceType");
        String packageName = request.getParameter("packageName");
        String groupName = request.getParameter("groupName");

        try {
            // Query to get all active pages of specified resourceType
            List<String> pagePaths = getActivePagePaths(resourceResolver, resourceType);

            // Get unique links from active pages
            Set<String> filteredLinks = new HashSet<>();
            for (String pagePath : pagePaths) {
                String pageUrl = "http://<host>:4503" + pagePath + ".html";  // Replace <host> with actual host
                filteredLinks.addAll(getFilteredLinks(pageUrl));
            }

            // Create package in AEM Package Manager
            createPackage(session, groupName, packageName, filteredLinks);

            response.getWriter().write("Package created successfully with filtered links as entries!");

        } catch (Exception e) {
            LOG.error("Error in processing links or creating package: {}", e.getMessage());
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error in processing links or creating package.");
        } finally {
            if (session != null && session.isLive()) {
                session.logout();
            }
        }
    }

    private List<String> getActivePagePaths(ResourceResolver resourceResolver, String resourceType) {
        List<String> pagePaths = new ArrayList<>();
        Map<String, String> queryMap = new HashMap<>();
        queryMap.put("path", "/content");
        queryMap.put("type", "cq:PageContent");
        queryMap.put("property", "sling:resourceType");
        queryMap.put("property.value", resourceType);
        queryMap.put("property.1_property", "cq:lastReplicationAction");
        queryMap.put("property.1_property.value", "Activate");
        queryMap.put("p.limit", "-1");

        Query query = queryBuilder.createQuery(PredicateGroup.create(queryMap), resourceResolver.adaptTo(Session.class));
        SearchResult searchResult = query.getResult();

        for (Hit hit : searchResult.getHits()) {
            try {
                pagePaths.add(hit.getPath());
            } catch (Exception e) {
                LOG.error("Error getting path from search hit: {}", e.getMessage());
            }
        }
        return pagePaths;
    }

    private Set<String> getFilteredLinks(String pageUrl) throws IOException {
        Set<String> links = new HashSet<>();
        Document doc = Jsoup.connect(pageUrl).get();

        // Get anchor and image links containing 'cdn' and '/aempros/content/dam'
        Elements elements = doc.select("a[href], img[src]");
        for (Element element : elements) {
            String link = element.hasAttr("href") ? element.attr("abs:href") : element.attr("abs:src");
            if (link.contains("cdn") && link.contains("/aempros/content/dam")) {
                links.add(link);
            }
        }
        return links;
    }

    private void createPackage(Session session, String groupName, String packageName, Set<String> filterPaths) throws Exception {
        JcrPackageManager packageManager = PackagingService.getPackageManager(session);
        JcrPackage jcrPackage = packageManager.create(groupName, packageName);

        DefaultWorkspaceFilter filter = new DefaultWorkspaceFilter();
        for (String path : filterPaths) {
            PathFilterSet pathFilterSet = new PathFilterSet(path);
            filter.add(pathFilterSet);
        }

        JcrPackageDefinition definition = jcrPackage.getDefinition();
        definition.setFilter(filter, true);

        ImportOptions importOptions = new ImportOptions();
        jcrPackage.install(importOptions);
    }
}
