import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Session;
import javax.servlet.Servlet;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component(service = Servlet.class,
    property = {
        ServletResolverConstants.SLING_SERVLET_PATHS + "=/bin/findActivePages",
        ServletResolverConstants.SLING_SERVLET_METHODS + "=GET"
    })
public class ActivePagesQueryServlet extends SlingAllMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(ActivePagesQueryServlet.class);

    @Reference
    private QueryBuilder queryBuilder;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        LOG.info("Received request to find active pages.");

        ResourceResolver resourceResolver = request.getResourceResolver();
        Session session = resourceResolver.adaptTo(Session.class);

        if (session == null) {
            LOG.error("Could not obtain JCR session.");
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Could not obtain JCR session.");
            return;
        }

        String resourceType = request.getParameter("resourceType");
        LOG.info("Querying for resourceType: {}", resourceType);

        try {
            // Set up query parameters in a map
            Map<String, String> queryMap = new HashMap<>();
            queryMap.put("path", "/content"); // Starting path for query
            queryMap.put("type", "cq:PageContent"); // Filter by cq:PageContent nodes
            queryMap.put("property", "sling:resourceType");
            queryMap.put("property.value", resourceType);
            queryMap.put("property.1_property", "cq:lastReplicationAction");
            queryMap.put("property.1_property.value", "Activate"); // Filter only active pages
            queryMap.put("p.limit", "-1"); // No limit on results

            // Wrap queryMap in PredicateGroup
            PredicateGroup predicateGroup = PredicateGroup.create(queryMap);

            // Create and execute the query
            LOG.info("Executing query with parameters: {}", queryMap);
            Query query = queryBuilder.createQuery(predicateGroup, session);
            SearchResult searchResult = query.getResult();

            // Build the response with active pages
            StringBuilder responseContent = new StringBuilder();
            List<Hit> hits = searchResult.getHits();
            LOG.info("Found {} active pages.", hits.size());

            for (Hit hit : hits) {
                String pagePath = hit.getPath();
                responseContent.append("Active page: ").append(pagePath).append("\n");
                LOG.debug("Found active page: {}", pagePath);
            }

            // Write the response
            response.setContentType("text/plain");
            response.getWriter().write(responseContent.toString());
            LOG.info("Response sent with active page paths.");

        } catch (Exception e) {
            LOG.error("Error executing query to find active pages", e);
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error finding active pages.");
        } finally {
            if (session != null && session.isLive()) {
                session.logout();
                LOG.info("Session logged out.");
            }
        }
    }
}
