import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.Self;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

import javax.annotation.PostConstruct;
import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.Session;

@Model(adaptables = Resource.class)
public class Reference {

    @Self
    private Resource resource;

    @ValueMapValue(name = "et:referencePath", injectionStrategy = InjectionStrategy.OPTIONAL)
    private String propReferencePath;

    @ValueMapValue(name = "et:hideContainer", injectionStrategy = InjectionStrategy.OPTIONAL)
    private String propHideContainer;

    private String referencePath;

    @PostConstruct
    protected void init() {
        try {
            if (propReferencePath != null && !propReferencePath.isEmpty()) {
                ResourceResolver resourceResolver = resource.getResourceResolver();
                Session session = resourceResolver.adaptTo(Session.class);
                
                if (session != null && session.nodeExists(propReferencePath)) {
                    Node node = session.getNode(propReferencePath);

                    if (propReferencePath.startsWith("/content/etrade/retail/en-US/global-components/disclosures")
                            && node.hasNode("jcr:content/richTextEditor")) {
                        referencePath = propReferencePath + "/jcr:content/richTextEditor";
                    } else if (propHideContainer != null && propHideContainer.isEmpty()
                            && propReferencePath.contains("/componentcontainer")
                            && node.hasNode("container-par")) {
                        referencePath = propReferencePath + "/container-par";
                    } else {
                        referencePath = propReferencePath;
                    }
                }
            }
        } catch (RepositoryException e) {
            // Handle exception
        }
    }

    public String getReferencePath() {
        return referencePath;
    }
}
