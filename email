import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component(service = Servlet.class,
    property = {
        ServletResolverConstants.SLING_SERVLET_PATHS + "=/bin/findActivePages",
        ServletResolverConstants.SLING_SERVLET_METHODS + "=GET"
    })
public class ActivePagesQueryServlet extends SlingAllMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(ActivePagesQueryServlet.class);

    @Reference
    private QueryBuilder queryBuilder;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        ResourceResolver resourceResolver = request.getResourceResolver();
        String resourceType = request.getParameter("resourceType"); // Pass Sling resource type as a parameter

        try {
            // Set up query parameters
            Map<String, String> queryMap = new HashMap<>();
            queryMap.put("path", "/content"); // Starting path
            queryMap.put("type", "cq:PageContent"); // Look within cq:PageContent nodes
            queryMap.put("property", "sling:resourceType");
            queryMap.put("property.value", resourceType);
            queryMap.put("property", "cq:lastReplicationAction");
            queryMap.put("property.value", "Activate"); // Only active pages
            queryMap.put("p.limit", "-1"); // No limit on the number of results

            // Create and execute the query
            Query query = queryBuilder.createQuery(queryBuilder.createQuery(queryMap, resourceResolver), resourceResolver);
            SearchResult searchResult = query.getResult();

            // Build the response with active pages
            StringBuilder responseContent = new StringBuilder();
            List<Hit> hits = searchResult.getHits();
            for (Hit hit : hits) {
                String pagePath = hit.getPath();
                responseContent.append("Active page: ").append(pagePath).append("\n");
            }

            // Write the response
            response.setContentType("text/plain");
            response.getWriter().write(responseContent.toString());
        } catch (Exception e) {
            LOG.error("Error executing query to find active pages", e);
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error finding active pages.");
        }
    }
}
