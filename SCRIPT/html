<!-- Toggle Button (visible only in wcmmode=disabled) -->
<div data-sly-test="${!wcmmode.edit}">
  <div class="col-md-push-10 col-xs-12 col-md-2">
    <div class="toggle toggle-inline" style="float: right; display: flex; align-items: center;">
      <input type="checkbox" aria-checked="false" id="customer-view" role="switch">
      <label for="customer-view">Customer View</label>
      <div class="switch"></div>
    </div>
  </div>
</div>

<!-- Line of Credit Wrapper -->
<div class="line-of-credit-wrapper" style="display: none;">
  <div class="line-of-credit-component">
    <!-- General Section -->
    <div>
      <h3 data-sly-test="${properties.creditLimitHeader}">
        ${properties.creditLimitHeader @ context='html'}
      </h3>
      <p>Show Credit Limit: 
        <span data-sly-test="${properties.showCreditLimit}">
          ${properties.showCreditLimit}
        </span>
      </p>
      <h3 data-sly-test="${properties.rateHeader}">
        ${properties.rateHeader @ context='html'}
      </h3>
      <p>Show Rate: 
        <span data-sly-test="${properties.showRate}">
          ${properties.showRate}
        </span>
      </p>
    </div>

    <!-- Maxymizer Section -->
    <div data-sly-test="${properties.maxymizerInfo}">
      <p>Maxymizer Content: 
        ${properties.maxymizerInfo}
      </p>
    </div>

    <!-- Target Section -->
    <div data-sly-test="${properties.targetSegment}">
      <p>Target Segment: 
        ${properties.targetSegment}
      </p>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const customerViewToggle = document.getElementById("customer-view");
    const lineOfCreditWrapper = document.querySelector(".line-of-credit-wrapper");

    // Function to toggle visibility
    const toggleCustomerView = () => {
      if (customerViewToggle && customerViewToggle.checked) {
        lineOfCreditWrapper.style.display = "block";
      } else {
        lineOfCreditWrapper.style.display = "none";
      }
    };

    // Add event listener to the toggle button
    if (customerViewToggle) {
      customerViewToggle.addEventListener("change", toggleCustomerView);
    }

    // Initialize the component state on load
    toggleCustomerView();
  });
</script>


///////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



<!-- LineOfCreditModel usage -->
<sly data-sly-use.header="com.etrade.cms.common.sling.models.LineOfCreditModel">

    <!-- Main container -->
    <div class="${header.cardBodyClasses}">
        <div>
            Credit Limit Header = ${properties.et:creditLimitHeader @ context='html'}
        </div>
    </div>
    
    <!-- Checkbox with aria-checked hardcoded to true -->
    <div>
        <input type="checkbox" aria-checked="true" id="customer-view" role="switch" checked>
        <label for="customer-view">Customer view</label>
    </div>

</sly>


=================------------------------------------=================================================-----------------


<!-- Existing Checkbox -->
<div>
    <input type="checkbox" aria-checked="true" id="customer-view" role="switch" checked>
    <label for="customer-view">Customer view</label>
</div>

<!-- Rest of the LineOfCreditModel usage -->
<sly data-sly-use.header="com.etrade.cms.common.sling.models.LineOfCreditModel">

    <!-- Main container -->
    <div class="${header.cardBodyClasses}">
        <div>
            Credit Limit Header = ${properties.et:creditLimitHeader @ context='html'}
        </div>
    </div>

</sly>


[ppppppppppp]]]]]]]]]]]]]]]]]]]]]]]]]]]p00000000000000000000888888888888889999990((((((((((())))))))))))()))))))

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Find the checkbox using its ID
        var checkbox = document.getElementById("customer-view");

        // Set the checkbox to checked
        checkbox.checked = true;

        // Update the aria-checked attribute to "true"
        checkbox.setAttribute("aria-checked", "true");
    });
</script>


NEWWWWWWWWWWWWWWWWWWWWW++++++++++++++++++++++++++++++++++++++++++++)))))))))))))))))))))))(((((((((((((


<div class="line-of-credit-wrapper" style="display: none;">
    <sly data-sly-use.header="com.etrade.cms.common.sling.models.LineOfCreditModel">
        <div class="${header.cardBodyClasses}">
            <div>
                Content ${header.content @ context='html'}
            </div>
            <div>
                Credit Limit Header ${header.creditLimitHeader @ context='html'}
            </div>
            <div>
                Rate Header ${header.rateHeader @ context='html'}
            </div>
        </div>
    </sly>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const customerViewToggle = document.getElementById("customer-view");
    const lineOfCreditWrapper = document.querySelector(".line-of-credit-wrapper");

    const toggleCustomerView = () => {
        if (customerViewToggle && customerViewToggle.checked) {
            lineOfCreditWrapper.style.display = "block";
        } else {
            lineOfCreditWrapper.style.display = "none";
        }
    };

    if (customerViewToggle) {
        customerViewToggle.addEventListener("change", toggleCustomerView);
        toggleCustomerView(); // Initialize on load
    }
});
</script>


newest ==========================================



<div class="line-of-credit-wrapper" style="display: none;">
    <sly data-sly-use.header="com.etrade.cms.common.sling.models.LineOfCreditModel">
        <div class="${header.cardBodyClasses @ context='attribute'}">
            <div>
                Content: ${header.content @ context='html'}
            </div>
            <div>
                Credit Limit Header: ${header.creditLimitHeader @ context='html'}
            </div>
            <div>
                Rate Header: ${header.rateHeader @ context='html'}
            </div>
        </div>
    </sly>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const customerViewToggle = document.getElementById("customer-view");
    const lineOfCreditWrapper = document.querySelector(".line-of-credit-wrapper");

    const toggleCustomerView = () => {
        if (customerViewToggle && customerViewToggle.checked) {
            lineOfCreditWrapper.style.display = "block";
        } else {
            lineOfCreditWrapper.style.display = "none";
        }
    };

    if (customerViewToggle) {
        customerViewToggle.addEventListener("change", toggleCustomerView);
        toggleCustomerView(); // Initialize on load
    } else {
        console.warn("Customer view toggle element not found.");
    }
});
</script>


--------------------------------------------------------------------------------

<sly data-sly-use.info="LineOfCreditModel">
  <div class="${info.lineofcreditclasses}">
    <div>
      Content ${properties['et:content'] @ context='html'}
    </div>
    <div>
      Credit Limit Header ${properties['et:creditLimitHeader'] @ context='html'}
    </div>
    <div>
      Rate Header ${properties['et:rateHeader'] @ context='html'}
    </div>
  </div>
</sly>
==============================================================================================


document.addEventListener("DOMContentLoaded", function () {
  // Select the button and the div
  const toggleButton = document.getElementById("toggle-button");
  const kalpeshDiv = document.getElementById("kalpesh");

  // Check if elements exist
  if (toggleButton && kalpeshDiv) {
    // Add a click event listener to the button
    toggleButton.addEventListener("click", function () {
      // Toggle the display style
      if (kalpeshDiv.style.display === "none") {
        kalpeshDiv.style.display = "block";
      } else {
        kalpeshDiv.style.display = "none";
      }
    });
  } else {
    console.warn("Required elements not found.");
  }
});


=================================================================================================================


document.addEventListener("DOMContentLoaded", function () {
    // Select the div element
    const customerDiv = document.querySelector(".loc.content-customer");

    // Check if the div exists
    if (customerDiv) {
        // If the div is currently displayed (block), hide it
        if (customerDiv.style.display === "block") {
            customerDiv.style.display = "none";
            console.log("Div is now hidden.");
        } else {
            // Otherwise, show the div
            customerDiv.style.display = "block";
            console.log("Div is now visible.");
        }
    } else {
        // Handle the case where the div is not found
        console.warn("Element with class 'loc content-customer' not found.");
    }
});


------------===================================------------------------------------------//////////////
<sly data-sly-use.info="com.etrade.cms.common.sling.models.LineOfCreditModel">
  <!-- Main Wrapper -->
  <div class="${info.lineofcreditclasses}">
    <!-- Content Section -->
    <div data-sly-test="${properties.et.content}">
      ${properties.et.content @ context='html'}
    </div>
    <!-- Credit Limit Header Section -->
    <div data-sly-test="${properties.et.creditLimitHeader}">
      ${properties.et.creditLimitHeader @ context='html'}
    </div>
    <!-- Rate Header Section -->
    <div data-sly-test="${properties.et.rateHeader}">
      ${properties.et.rateHeader @ context='html'}
    </div>
  </div>
</sly>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Get the checkbox by ID
    var checkbox = document.getElementById("customer-view");

    // Check if the checkbox element exists
    if (checkbox) {
      // Set the checkbox to checked
      checkbox.checked = true;

      // Update the aria-checked attribute
      checkbox.setAttribute("aria-checked", "true");
    } else {
      console.warn("Checkbox with ID 'customer-view' not found.");
    }
  });
</script>

=============================================================================


<sly data-sly-use.info="com.etrade.cms.common.sling.models.LineOfCreditModel">
  <!-- Main Wrapper -->
  <div class="${info.lineofcreditclasses}">
    <!-- Content Section -->
    <div data-sly-test="${properties.et.content}">
      ${properties.et.content @ context='html'}
    </div>
    <!-- Credit Limit Header Section -->
    <div data-sly-test="${properties.et.creditLimitHeader}">
      ${properties.et.creditLimitHeader @ context='html'}
    </div>
    <!-- Rate Header Section -->
    <div data-sly-test="${properties.et.rateHeader}">
      ${properties.et.rateHeader @ context='html'}
    </div>
  </div>
</sly>

<!-- Toggle Content Section -->
<div class="loc content-customer" id="customer-content" style="display: none;">
  <!-- Dynamic Content Goes Here -->
</div>

<!-- Toggle Button -->
<label>
  <input type="checkbox" id="customer-view" />
  Toggle Content
</label>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Get the checkbox and the content div
    var checkbox = document.getElementById("customer-view");
    var customerContent = document.getElementById("customer-content");

    // Function to toggle the display of the content
    function toggleContent() {
      if (checkbox.checked) {
        // Hide the content when the checkbox is "on" (checked)
        customerContent.style.display = "none";
      } else {
        // Show the content when the checkbox is "off" (unchecked)
        customerContent.style.display = "block";
      }
    }

    // Attach event listener to the checkbox
    if (checkbox && customerContent) {
      checkbox.addEventListener("change", toggleContent);

      // Initialize the state based on the checkbox's initial value
      toggleContent();
    } else {
      console.warn("Required elements not found: 'customer-view' or 'customer-content'.");
    }
  });
</script>


=============================jQUESRY CODE==============================


<script>
  $(document).ready(function () {
    const $customerViewToggle = $("#customer-view");
    const $lineOfCreditWrapper = $(".line-of-credit-wrapper");

    // Function to toggle visibility
    const toggleCustomerView = () => {
      if ($customerViewToggle.is(":checked")) {
        $lineOfCreditWrapper.show();
      } else {
        $lineOfCreditWrapper.hide();
      }
    };

    // Add event listener to the toggle button
    $customerViewToggle.on("change", toggleCustomerView);

    // Initialize the component state on load
    toggleCustomerView();
  });
</script>














